fn test_nesting:
= ; assert_eq (3) 3

fn test_deep_nesting:
= ; assert_eq (((3))) 3

fn test_add:
= ; assert_eq (add 3 3) 6

fn test_add_nested:
= ; assert_eq (add 3 (add 3 1)) 7

fn test_add_nested2:
= ; assert_eq (add (add 3 1) 3) 7

fn test_more_complex_arithmetic:
=; assert_eq (add 17 (div 3 (div 1 (mod 100 3)))) 20

fn test_bool_true:
= ; assert_eq true true

fn test_bool_false:
= ; assert_eq false false

fn test_bool_and:
= ; assert_eq (and true false) false

fn test_bool_and_nested:
= ; assert_eq (and (and true true) true) true

fn test_bool_type_missmatch:
= ; assert_type_missmatch (or 3 3)

fn test_arith:
= ; assert_eq (add (add 1 (mul 2 3)) 3) 10

-- CONDITIONAL

fn test_cond_true:
=; assert_eq (if true then 3 else 4) 3

fn test_cond_false:
=; assert_eq (if false then 3 else 4) 4

-- LAMBDA

fn test_lambda:
=; assert_eq ((\x -> mul x x) 3) 9

fn test_lambda_nested:
=; assert_eq ((\y -> (\x -> mul x y) 3) 4) 12

fn test_lambda_deeply_nested:
=; assert_eq ( (\d -> (\c -> (\b -> (\a -> mul d (add a (add b c))) 1) 1) 1) 10) 30

-- FUNC CALL

fn test_func_call:
=; assert_eq (square 3) 9

fn square: int
= x ; mul x x

-- PATTERN MATCHING

fn test_pm_bool_1:
=; assert_eq (three true) 3

fn test_pm_bool_2:
=; assert_eq (three false) 4

fn three:
= true ; 3
= false ; 4

fn test_pm_number_1:
=; assert_eq (naiv_add 3 3) 6

fn test_pm_number_2:
=; assert_eq (naiv_add 0 1) 1

fn naiv_add:
= 0 a ; a
= a 0 ; a
= 1 1 ; 2
= 3 3 ; 6
= 4 2 ; 6

-- LIST & STRING

fn test_list:
=; assert_eq [1,2,3,4] [1,2,3,4]

fn test_head_simple:
=; assert_eq (head [33]) 33

fn test_head:
=; assert_eq (head (head [[[33]]])) [33]

fn test_tail_simple:
=; assert_eq (tail [1,2,3]) [2,3]

fn test_tail:
=; assert_eq (tail (tail [1,2,3])) [3]

fn test_list_head:
=; assert_eq (head [(head [1])]) 1

fn head:
= (l:ls) ; l

fn tail:
= (l:ls) ; ls

