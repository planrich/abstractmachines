
fn sudoku_correct:
= s ; let atv: psudoku_check s (sudoku_line_correct) (at) in
      let colv: psudoku_check s (sudoku_line_correct) (sudoku_col) in
      let block: psudoku_check s (sudoku_line_correct) (sudoku_block) in
      (and (and atv colv) block)
--= s ; reduce and 
--        (map 
--            (\x -> psudoku_check s (sudoku_line_correct) (x))
--            [(at), (sudoku_col), (sudoku_block)]
--        ) true
--

fn atw:
= l i ; at l i

--| a sudoku is considered valid if every column, row and block contains every number from 1-9 only once.
--  To allow solving of the sudoku 0 can be contained instead of the actual numbers which means that
--  the position can be exchanged by the solver
fn sudoku_valid:
= s ; let atv: psudoku_check s (sudoku_line_valid) (at) in
      let colv: psudoku_check s (sudoku_line_valid) (sudoku_col) in
      let block: psudoku_check s (sudoku_line_valid) (sudoku_block) in
      (and (and atv colv) block)


--reduce and 
--        (map 
--            (\x -> psudoku_check s (sudoku_line_valid) (x)) 
--            [(at), (sudoku_col), (sudoku_block)]
--        ) true

fn psudoku_check:
= s check extract ; reduce and (map (\x -> (check (extract s x))) [0,1,2,3,4,5,6,7,8]) true

fn sudoku_solve:
= s ; if sudoku_valid s
      then psudoku_solve s 0 0
      else fatal "sudoku provided is not valid, cannot solve it" --sudoku_solve (sudoku_step s)
-- private method
fn psudoku_solve:
= s 8 9; s
= s r 9; psudoku_solve s (add r 1) 0
= s r c; if equal (sudoku_at s r c) 0
         then sudoku_branch s r c 1
         else psudoku_solve s r (add c 1)

fn sudoku_branch:
= s r c 10 ; sudoku_substitue s r c 10 -- cannot solve. headed into a local deadlock. so return  back to the last call of branch which
                                       -- is not iterated through the hole collection from 1..9
= s r c n ; let subs: sudoku_substitue s r c n in
            if sudoku_valid subs
            then let solv_s: (psudoku_solve subs r (add c 1)) in
                 if sudoku_correct solv_s
                 then solv_s --(psudoku_solve (sudoku_substitue s r c n) r c) -- double calc because there is no 'let' or 'where' yet
                 else if sudoku_valid solv_s
                      then psudoku_solve solv_s r (add c 1)
                      else sudoku_branch subs r c (add n 1)
            else sudoku_branch s r c (add n 1)

fn sudoku_at:
= s r c ; (at (at s r) c)

fn sudoku_block:
= s 0 ; pblock s 0 0 3 3 []
= s 1 ; pblock s 3 0 3 3 []
= s 2 ; pblock s 6 0 3 3 []
= s 3 ; pblock s 0 3 3 3 []
= s 4 ; pblock s 3 3 3 3 []
= s 5 ; pblock s 6 3 3 3 []
= s 6 ; pblock s 0 6 3 3 []
= s 7 ; pblock s 3 6 3 3 []
= s 8 ; pblock s 6 6 3 3 []
= s _ ; []
-- private method
fn pblock:
= s _ _ _ 0 list ; list
= s x y c l list ; pblock s x (add y 1) c (sub l 1) (concat list (take c (drop x (at s y))))

fn sudoku_substitue:
= s r c n ; rep s r (rep (at s r) c n)

fn sudoku_line:
= s i ; at s i

--| get a column of a nested list
fn sudoku_col:
= sudoku i ; pcol sudoku [] i
-- private method
fn pcol:
= [] c _ ; reverse c
= (s:ss) c i ; pcol ss (cons (at s i) c) i

fn reverse:
= list ; preverse list []
-- private method
fn preverse:
= [] list ; list
= (l:ls) list ; preverse ls (cons l list)


--| replace an element in a list at the specified parameter
fn rep:
= s i e ; prep s [] i e
-- private method
fn prep:
= [] r _ _ ; r
= (s:ss) r 0 e ; prep ss (append r e) (sub 0 1) e
= (s:ss) r i e ; prep ss (append r s) (sub i 1) e

-- if a malformed index is given this function most likley throws an error.
-- this is fair enough for a prototype.
--| get an element at the specified postion in a list
--fn at:
--= [] i ; fatal ["function 'at' could not extract with given index. that means that the index was out of bounds",i]
--= (l:ls) 0 ; l
--= (l:ls) i ; at ls (sub i 1)

fn sudoku_line_correct:
= line ; reduce and (map (\x -> equal (list_count_expr line x) 1) [1,2,3,4,5,6,7,8,9]) true

-- a sudoku line is valid iff every number from 1 to 9 only occurs max once or that position is 0
fn sudoku_line_valid:
= line ; and (reduce and (map (\x -> and (greater_equal x 0) (less_equal x 9)) line) true) (pline_valid line 1)
-- private method
fn pline_valid:
= list 10 ; true
= list i ; if less_equal (list_count_expr list i) 1
           then pline_valid list (add i 1) 
           else false

fn list_count_expr:
= list e ; plist_count_expr list e 0
-- private method
fn plist_count_expr:
= [] _ i ; i
= (l:ls) e i ; if equal l e
                 then plist_count_expr ls e (add i 1)
                 else plist_count_expr ls e i

fn list_len:
= l ; plist_len l 0
fn plist_len:
= [] n ; n
= (l:ls) n ; plist_len ls (add n 1)

fn take:
= list a ; ptake list a []
-- private method
fn ptake:
= n [] list ; if greater_equal n 0
              then list
              else fatal "tried to take to much from a list"
= 0 (l:ls) list ; list
= n (l:ls) list ; if greater n 0
                  then ptake (sub n 1) ls (append list l)
                  else list

fn drop:
= _ [] ; []
= 0 list ; list
= n (l:ls) ; if greater n 0
             then drop (sub n 1) ls
             else cons l ls

fn concat:
= list [] ; list
= list (r:rs) ; concat (append list r) rs

fn reduce:
= f [] s ; s
= f (l:ls) s ; reduce f ls (f l s)

fn for:
= from to ; pfor from to []
fn pfor:
= from to l ; if equal from to
              then cons to l
              else pfor from (sub to 1) (cons to l)

fn map:
= f list ; pmap f list []
-- private method
fn pmap:
= _ [] list ; list
= f (l:ls) list ; pmap f ls (append list (f l))


fn main:
=; sudoku_solve (sudoku 5)

fn sudoku:
= 0 ; [[9,1,6,0,0,4,0,7,2],
       [8,0,0,6,2,0,0,5,0],
       [5,0,0,0,0,8,9,3,0],
       [0,6,0,0,0,0,2,0,0],
       [0,0,0,2,0,7,0,0,0],
       [0,0,5,0,0,0,0,9,0],
       [0,9,7,8,0,0,0,0,3],
       [0,8,0,0,7,6,0,0,9],
       [4,5,0,1,0,0,6,8,7]]

= 1 ; [[6,0,0,3,0,0,1,0,0],
       [0,7,1,6,2,0,0,0,0],
       [8,0,5,0,0,1,0,0,0],
       [5,0,0,8,7,0,9,0,1],
       [0,0,9,0,0,0,6,0,0],
       [4,0,7,0,6,9,0,0,8],
       [0,0,0,2,0,0,8,0,7],
       [0,0,0,0,8,6,4,1,0],
       [0,0,8,0,0,3,0,0,2]]

= 2 ; [[9,0,6,0,1,3,0,0,8],
       [0,5,8,0,0,0,0,9,0],
       [0,3,0,0,0,0,0,1,0],
       [0,6,0,8,0,0,9,2,0],
       [0,0,3,4,0,9,1,0,0],
       [0,4,9,0,0,6,0,3,0],
       [0,9,0,0,0,0,0,8,0],
       [0,1,0,0,0,0,6,7,0],
       [4,0,0,9,6,0,3,0,1]]

= 3 ; [ [0,0,0, 0,0,0, 0,0,0]
      , [0,0,0, 0,0,0, 0,0,0]
      , [0,0,0, 0,0,0, 0,0,0]

      , [0,0,0, 0,0,0, 0,0,0]
      , [0,0,0, 0,0,0, 0,0,0]
      , [0,0,0, 0,0,0, 0,0,0]

      , [0,0,0, 0,0,0, 0,0,0]
      , [0,0,0, 0,0,0, 0,0,0]
      , [0,0,0, 0,0,0, 0,0,0]
      ]
= 4 ; [ [0,0,4, 0,0,0, 7,0,0]
      , [6,0,7, 0,1,8, 0,4,9]
      , [0,9,0, 4,0,0, 0,3,0]

      , [0,0,9, 0,0,7, 0,0,0]
      , [4,0,0, 0,0,3, 0,0,5]
      , [0,0,0, 8,0,0, 0,0,0]

      , [0,7,0, 0,0,2, 4,9,0]
      , [2,0,0, 0,9,0, 0,0,6]
      , [9,0,5, 0,0,0, 3,0,0]
      ]
= 5 ; [ [3,0,5, 0,8,7, 0,9,0]
      , [0,9,7, 0,0,1, 6,0,3]
      , [6,0,8, 9,3,2, 5,7,1]

      , [8,5,0, 0,1,4, 0,2,0]
      , [7,2,1, 0,9,6, 8,0,5]
      , [4,0,0, 8,0,5, 9,1,7]

      , [0,3,0, 2,4,8, 7,0,0]
      , [5,7,2, 1,0,9, 4,3,8]
      , [9,8,0, 0,7,3, 0,6,2]
      ]
= 6 ; [ [0,0,7, 9,0,0, 0,0,0]
      , [0,0,4, 3,0,0, 0,1,0]
      , [0,0,0, 0,1,0, 0,8,9]

      , [6,0,0, 0,0,0, 0,5,1]
      , [1,5,3, 0,0,0, 6,4,7]
      , [4,7,0, 0,0,0, 0,0,3]

      , [3,2,0, 0,8,0, 0,0,0]
      , [0,6,0, 0,0,2, 4,0,0]
      , [0,0,0, 0,0,7, 3,0,0]
      ]
